[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "PhotoImage",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "importPath": "c",
        "description": "c",
        "isExtraImport": true,
        "detail": "c",
        "documentation": {}
    },
    {
        "label": "Speedtest",
        "importPath": "speedtest",
        "description": "speedtest",
        "isExtraImport": true,
        "detail": "speedtest",
        "documentation": {}
    },
    {
        "label": "python",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "python = 'I love Python'\nprint(python)\na = (python.replace('love', 'hate'))\nprint(a.title())\ntext = 'afjdfj 5434'\nnum = '5434'\nprint(text.isalnum())\nprint(num.isnumeric())\nprint(\"Olma, anor, nok, kivi\".split())\nkitob = 'Ahmad yassaviy'",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "a = (python.replace('love', 'hate'))\nprint(a.title())\ntext = 'afjdfj 5434'\nnum = '5434'\nprint(text.isalnum())\nprint(num.isnumeric())\nprint(\"Olma, anor, nok, kivi\".split())\nkitob = 'Ahmad yassaviy'\nson= 4\nprint(kitob , \"kitobidan\" , str(son) + \"ta\" , \"bor\" )",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "text = 'afjdfj 5434'\nnum = '5434'\nprint(text.isalnum())\nprint(num.isnumeric())\nprint(\"Olma, anor, nok, kivi\".split())\nkitob = 'Ahmad yassaviy'\nson= 4\nprint(kitob , \"kitobidan\" , str(son) + \"ta\" , \"bor\" )\nname = \"Jasurbek\"\nprint(\"Mening ismim\", name)",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "num = '5434'\nprint(text.isalnum())\nprint(num.isnumeric())\nprint(\"Olma, anor, nok, kivi\".split())\nkitob = 'Ahmad yassaviy'\nson= 4\nprint(kitob , \"kitobidan\" , str(son) + \"ta\" , \"bor\" )\nname = \"Jasurbek\"\nprint(\"Mening ismim\", name)\ncolor = \"Orange\"",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "kitob",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "kitob = 'Ahmad yassaviy'\nson= 4\nprint(kitob , \"kitobidan\" , str(son) + \"ta\" , \"bor\" )\nname = \"Jasurbek\"\nprint(\"Mening ismim\", name)\ncolor = \"Orange\"\nprint(f\"Mening yoqtirgan rangim: {color}\")\nprint( \"A\" in \"Aston Martin\")\nprint( \"B\" in \"MW\")\nprint( \"@gmail.com\" in \"my_mail@gmail.com\")",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "name = \"Jasurbek\"\nprint(\"Mening ismim\", name)\ncolor = \"Orange\"\nprint(f\"Mening yoqtirgan rangim: {color}\")\nprint( \"A\" in \"Aston Martin\")\nprint( \"B\" in \"MW\")\nprint( \"@gmail.com\" in \"my_mail@gmail.com\")",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "color = \"Orange\"\nprint(f\"Mening yoqtirgan rangim: {color}\")\nprint( \"A\" in \"Aston Martin\")\nprint( \"B\" in \"MW\")\nprint( \"@gmail.com\" in \"my_mail@gmail.com\")",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "calculate_total_price",
        "kind": 2,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "def calculate_total_price():\n    total_price = 0\n    shopping_list = []\n    for item, item_data in my_magazine.items():\n        quantity = item_data['quantity']\n        total_price += quantity * item_data['price']\n        if quantity > 0:\n            shopping_list.append(f'{item}: {quantity} шт.')\n    result_label.config(text=f'Total payment: {total_price} so\\'m')\n    shopping_text.delete(1.0, tk.END)",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "increase_quantity",
        "kind": 2,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "def increase_quantity(item):\n    my_magazine[item]['quantity'] += 1\n    calculate_total_price()\ndef decrease_quantity(item):\n    if my_magazine[item]['quantity'] > 0:\n        my_magazine[item]['quantity'] -= 1\n        calculate_total_price()\nroot = tk.Tk()\nroot.title(\"Magazine Sales\")\nroot.geometry('1920x1080')",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "decrease_quantity",
        "kind": 2,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "def decrease_quantity(item):\n    if my_magazine[item]['quantity'] > 0:\n        my_magazine[item]['quantity'] -= 1\n        calculate_total_price()\nroot = tk.Tk()\nroot.title(\"Magazine Sales\")\nroot.geometry('1920x1080')\nitem_buttons = {}\nitem_labels = {}\n# item_images = {}",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "my_magazine",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "my_magazine = {\n    'non': {\n        'price': 4000,\n        'quantity': 0,\n        'image_filename': 'non.png'\n    },\n    'anor': {\n        'price': 45000,\n        'quantity': 0,\n        'image_filename': 'anor.png'",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Magazine Sales\")\nroot.geometry('1920x1080')\nitem_buttons = {}\nitem_labels = {}\n# item_images = {}\nfor item, item_data in my_magazine.items():\n    item_buttons[item] = {\n        'plus': tk.Button(root, text=\"+\", command=lambda item=item: increase_quantity(item)),\n        'minus': tk.Button(root, text=\"-\", command=lambda item=item: decrease_quantity(item))",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "item_buttons",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "item_buttons = {}\nitem_labels = {}\n# item_images = {}\nfor item, item_data in my_magazine.items():\n    item_buttons[item] = {\n        'plus': tk.Button(root, text=\"+\", command=lambda item=item: increase_quantity(item)),\n        'minus': tk.Button(root, text=\"-\", command=lambda item=item: decrease_quantity(item))\n    }\n    item_labels[item] = tk.Label(root, text=f'{item}: {item_data[\"price\"]} so\\'m')\n    # item_images[item] = PhotoImage(file=f\"images/{item_data['image_filename']}\")",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "item_labels",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "item_labels = {}\n# item_images = {}\nfor item, item_data in my_magazine.items():\n    item_buttons[item] = {\n        'plus': tk.Button(root, text=\"+\", command=lambda item=item: increase_quantity(item)),\n        'minus': tk.Button(root, text=\"-\", command=lambda item=item: decrease_quantity(item))\n    }\n    item_labels[item] = tk.Label(root, text=f'{item}: {item_data[\"price\"]} so\\'m')\n    # item_images[item] = PhotoImage(file=f\"images/{item_data['image_filename']}\")\n    if item == 'non':",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "result_label",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "result_label = tk.Label(root, text=\"\")\nresult_label.place(x=830, y=300)\ncalculate_button = tk.Button(root, text=\"Calculate Total Price\", command=calculate_total_price)\ncalculate_button.place(x=50, y=450)\nshopping_text = tk.Text(root, height=10, width=30)\nshopping_text.place(x=800, y=100)\nroot.mainloop()",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "calculate_button",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "calculate_button = tk.Button(root, text=\"Calculate Total Price\", command=calculate_total_price)\ncalculate_button.place(x=50, y=450)\nshopping_text = tk.Text(root, height=10, width=30)\nshopping_text.place(x=800, y=100)\nroot.mainloop()",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "shopping_text",
        "kind": 5,
        "importPath": "10",
        "description": "10",
        "peekOfCode": "shopping_text = tk.Text(root, height=10, width=30)\nshopping_text.place(x=800, y=100)\nroot.mainloop()",
        "detail": "10",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "11",
        "description": "11",
        "peekOfCode": "n = [18 , 6 , 7 , 8 ,\n     9 , 1 , 3 , 5 , \n     4 , 10 , 14]\nn1 = []\nn2 = []\nfor i in n:\n    if i%2 == 0:\n        n1.append(i)\n    else:\n        n2.append(i)",
        "detail": "11",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "11",
        "description": "11",
        "peekOfCode": "n1 = []\nn2 = []\nfor i in n:\n    if i%2 == 0:\n        n1.append(i)\n    else:\n        n2.append(i)\nn2.reverse()\nn2.sort()\nn1.sort()",
        "detail": "11",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "11",
        "description": "11",
        "peekOfCode": "n2 = []\nfor i in n:\n    if i%2 == 0:\n        n1.append(i)\n    else:\n        n2.append(i)\nn2.reverse()\nn2.sort()\nn1.sort()\nn1.reverse()",
        "detail": "11",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "12",
        "description": "12",
        "peekOfCode": "d = datetime.now()\n# print(str(d.year) + '-' + str(d.month) + '-' + str(d.day))\nprint(d.strftime(\"%A-%d-%m-%y-%T\"))",
        "detail": "12",
        "documentation": {}
    },
    {
        "label": "dic",
        "kind": 5,
        "importPath": "13",
        "description": "13",
        "peekOfCode": "dic = {\n    'Usmon': 'lox',\n    'Usmon1': 'dibil',\n    'Usmon2': 'tupoy'\n}\nif 'Usmon' in dic:\n    print(True)\nelif 'Behruz' in dic:\n    print(True)\nelse:",
        "detail": "13",
        "documentation": {}
    },
    {
        "label": "jopa",
        "kind": 2,
        "importPath": "14",
        "description": "14",
        "peekOfCode": "def jopa(num1,num2):\n    return num1,num2\nif num1 > num2:\n        print(num1)\nelse:    \n        print(num2)\n    # print(num1)3\n    # print(num2)",
        "detail": "14",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "14",
        "description": "14",
        "peekOfCode": "num1 = int(input(\"1: \"))\nnum2 = int(input(\"2: \"))\ndef jopa(num1,num2):\n    return num1,num2\nif num1 > num2:\n        print(num1)\nelse:    \n        print(num2)\n    # print(num1)3\n    # print(num2)",
        "detail": "14",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "14",
        "description": "14",
        "peekOfCode": "num2 = int(input(\"2: \"))\ndef jopa(num1,num2):\n    return num1,num2\nif num1 > num2:\n        print(num1)\nelse:    \n        print(num2)\n    # print(num1)3\n    # print(num2)",
        "detail": "14",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "15",
        "description": "15",
        "peekOfCode": "n = [1,2,3,4,5,6,7,8,9,10]\na = 0\nfor element in n:\n    a = a+element\n    print(a)",
        "detail": "15",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "15",
        "description": "15",
        "peekOfCode": "a = 0\nfor element in n:\n    a = a+element\n    print(a)",
        "detail": "15",
        "documentation": {}
    },
    {
        "label": "hk",
        "kind": 5,
        "importPath": "19",
        "description": "19",
        "peekOfCode": "hk = (\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\")\n# print(hk[0])\n# print(hk[1])\n# print(hk[2])\n# print(hk[3])\n# print(hk[4])\n# print(hk[5])\n# print(hk[6])\nprint(len(hk))\nfor a in hk:",
        "detail": "19",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "2",
        "description": "2",
        "peekOfCode": "j = int(input(\"Yosh: \"))\nif j<=10:\n    print(\"Yosh bola\")\nelif j>10 and j<=19:\n    print(\"O'smir\")\nelif j>19 and j<=30:\n    print(\"O'rta yosh\")\nelse:\n    print(\"Yoshi kotta odam\")",
        "detail": "2",
        "documentation": {}
    },
    {
        "label": "min_num",
        "kind": 5,
        "importPath": "21",
        "description": "21",
        "peekOfCode": "min_num = 1\nmax_num = 100\nsecret_num = random.randint(min_num, max_num)\nattempts = 10\nprint(f\"Привет! Давай поиграем в игру. Я загадал число от {min_num} до {max_num}. Ты должен угадать его за {attempts} попыток. Поехали!\")\nfor i in range(attempts):\n  print(f\"Попытка {i+1} из {attempts}.\")\n  guess = int(input(\"Введи свое число: \"))\n  if guess == secret_num:\n    print(\"Поздравляю! Ты угадал число!\")",
        "detail": "21",
        "documentation": {}
    },
    {
        "label": "max_num",
        "kind": 5,
        "importPath": "21",
        "description": "21",
        "peekOfCode": "max_num = 100\nsecret_num = random.randint(min_num, max_num)\nattempts = 10\nprint(f\"Привет! Давай поиграем в игру. Я загадал число от {min_num} до {max_num}. Ты должен угадать его за {attempts} попыток. Поехали!\")\nfor i in range(attempts):\n  print(f\"Попытка {i+1} из {attempts}.\")\n  guess = int(input(\"Введи свое число: \"))\n  if guess == secret_num:\n    print(\"Поздравляю! Ты угадал число!\")\n    break ",
        "detail": "21",
        "documentation": {}
    },
    {
        "label": "secret_num",
        "kind": 5,
        "importPath": "21",
        "description": "21",
        "peekOfCode": "secret_num = random.randint(min_num, max_num)\nattempts = 10\nprint(f\"Привет! Давай поиграем в игру. Я загадал число от {min_num} до {max_num}. Ты должен угадать его за {attempts} попыток. Поехали!\")\nfor i in range(attempts):\n  print(f\"Попытка {i+1} из {attempts}.\")\n  guess = int(input(\"Введи свое число: \"))\n  if guess == secret_num:\n    print(\"Поздравляю! Ты угадал число!\")\n    break \n  elif guess < secret_num:",
        "detail": "21",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "21",
        "description": "21",
        "peekOfCode": "attempts = 10\nprint(f\"Привет! Давай поиграем в игру. Я загадал число от {min_num} до {max_num}. Ты должен угадать его за {attempts} попыток. Поехали!\")\nfor i in range(attempts):\n  print(f\"Попытка {i+1} из {attempts}.\")\n  guess = int(input(\"Введи свое число: \"))\n  if guess == secret_num:\n    print(\"Поздравляю! Ты угадал число!\")\n    break \n  elif guess < secret_num:\n    print(\"Твое число слишком маленькое. Попробуй еще раз.\")",
        "detail": "21",
        "documentation": {}
    },
    {
        "label": "fk",
        "kind": 5,
        "importPath": "22",
        "description": "22",
        "peekOfCode": "fk = list(range(1,25))\nevnum= []\noddnum= []\nfor i in fk:\n    if i in fk:\n        if i % 2 == 0:\n            evnum.append(i)\n        else:\n            oddnum.append(i)\nprint(oddnum)",
        "detail": "22",
        "documentation": {}
    },
    {
        "label": "ogohlantirish_berish",
        "kind": 2,
        "importPath": "24",
        "description": "24",
        "peekOfCode": "def ogohlantirish_berish(test_natijalari):\n    tartiblangan_natijalar = sorted(enumerate(test_natijalari, start=1), key=lambda x: x[1], reverse=True)\n    eng_oxirgi_oquvchilar = tartiblangan_natijalar[-3:]\n    for tartib, (oquvchi, natija) in enumerate(eng_oxirgi_oquvchilar, start=1):\n        print(f\"{tartib}. {oquvchi}: Natija - {natija}. Ogohlantirish:Harakat qiling\")\ntest_natijalari = [90, 85, 92, 88, 78, 95]\nogohlantirish_berish(test_natijalari)",
        "detail": "24",
        "documentation": {}
    },
    {
        "label": "test_natijalari",
        "kind": 5,
        "importPath": "24",
        "description": "24",
        "peekOfCode": "test_natijalari = [90, 85, 92, 88, 78, 95]\nogohlantirish_berish(test_natijalari)",
        "detail": "24",
        "documentation": {}
    },
    {
        "label": "mytoken",
        "kind": 5,
        "importPath": "27",
        "description": "27",
        "peekOfCode": "mytoken = '6652182496:AAGx3FTlkqe0YZrUVtaTmdCt2g0JMdmortg'\nbot = Bot(token=mytoken)\ndp = Dispatcher()\n@dp.message(Command(\"start\" , \"main\" , \"help\"))\nasync def cmd_start(message: Message):\n    await message.answer(f\" {message.from_user.first_name} salom botga xush kelibsiz\")\n    if message.answer(message.from_user.f) == 'Saidusmon':\n        print(\"Usmon lox\")\nasync def main():\n    await dp.start_polling(bot)",
        "detail": "27",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "27",
        "description": "27",
        "peekOfCode": "bot = Bot(token=mytoken)\ndp = Dispatcher()\n@dp.message(Command(\"start\" , \"main\" , \"help\"))\nasync def cmd_start(message: Message):\n    await message.answer(f\" {message.from_user.first_name} salom botga xush kelibsiz\")\n    if message.answer(message.from_user.f) == 'Saidusmon':\n        print(\"Usmon lox\")\nasync def main():\n    await dp.start_polling(bot)\nasyncio.run(main())",
        "detail": "27",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "27",
        "description": "27",
        "peekOfCode": "dp = Dispatcher()\n@dp.message(Command(\"start\" , \"main\" , \"help\"))\nasync def cmd_start(message: Message):\n    await message.answer(f\" {message.from_user.first_name} salom botga xush kelibsiz\")\n    if message.answer(message.from_user.f) == 'Saidusmon':\n        print(\"Usmon lox\")\nasync def main():\n    await dp.start_polling(bot)\nasyncio.run(main())",
        "detail": "27",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "28",
        "description": "28",
        "peekOfCode": "bot = Bot(token=TOKEN)\ndp = Dispatcher(bot)\nanswers = ['Я не понял, что ты хочешь сказать.', 'Извини, я тебя не понимаю.', 'Я не знаю такой команды.', 'Мой разработчик не говорил, что отвечать в такой ситуации... >_<']\n# Обработка команды /start\n@dp.message_handler(commands=['start'])\nasync def welcome(message: types.Message):\n    # Добавляем кнопки, которые будут появляться после ввода команды /start\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    button1 = types.KeyboardButton('🛍 Товары')\n    button2 = types.KeyboardButton('⚙️ Настройки')",
        "detail": "28",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "28",
        "description": "28",
        "peekOfCode": "dp = Dispatcher(bot)\nanswers = ['Я не понял, что ты хочешь сказать.', 'Извини, я тебя не понимаю.', 'Я не знаю такой команды.', 'Мой разработчик не говорил, что отвечать в такой ситуации... >_<']\n# Обработка команды /start\n@dp.message_handler(commands=['start'])\nasync def welcome(message: types.Message):\n    # Добавляем кнопки, которые будут появляться после ввода команды /start\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    button1 = types.KeyboardButton('🛍 Товары')\n    button2 = types.KeyboardButton('⚙️ Настройки')\n    button3 = types.KeyboardButton('📄 Справка')",
        "detail": "28",
        "documentation": {}
    },
    {
        "label": "answers",
        "kind": 5,
        "importPath": "28",
        "description": "28",
        "peekOfCode": "answers = ['Я не понял, что ты хочешь сказать.', 'Извини, я тебя не понимаю.', 'Я не знаю такой команды.', 'Мой разработчик не говорил, что отвечать в такой ситуации... >_<']\n# Обработка команды /start\n@dp.message_handler(commands=['start'])\nasync def welcome(message: types.Message):\n    # Добавляем кнопки, которые будут появляться после ввода команды /start\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    button1 = types.KeyboardButton('🛍 Товары')\n    button2 = types.KeyboardButton('⚙️ Настройки')\n    button3 = types.KeyboardButton('📄 Справка')\n    # Разделяю кнопки по строкам так, чтобы товары были отдельно от остальных кнопок",
        "detail": "28",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 5,
        "importPath": "5",
        "description": "5",
        "peekOfCode": "login = input('Login kiriting >>>>')\na = 'admin'\nha = 'ha'\nif login == a:\n    print(\"Xush kelibsiz,Admin.\")\n    p = input(\"Foydalanuvchilarni ro'yxatini ko'rasizmi?\")\n    print('Xech kim yoq')\nelif login != a:\n    print(f\"Xush kelibsiz,{login}\")\n    print(\"Iltimoz 2 ta son kiriting⇊⇊\")",
        "detail": "5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "5",
        "description": "5",
        "peekOfCode": "a = 'admin'\nha = 'ha'\nif login == a:\n    print(\"Xush kelibsiz,Admin.\")\n    p = input(\"Foydalanuvchilarni ro'yxatini ko'rasizmi?\")\n    print('Xech kim yoq')\nelif login != a:\n    print(f\"Xush kelibsiz,{login}\")\n    print(\"Iltimoz 2 ta son kiriting⇊⇊\")\n    son1=input(\"1-son>>>\")",
        "detail": "5",
        "documentation": {}
    },
    {
        "label": "ha",
        "kind": 5,
        "importPath": "5",
        "description": "5",
        "peekOfCode": "ha = 'ha'\nif login == a:\n    print(\"Xush kelibsiz,Admin.\")\n    p = input(\"Foydalanuvchilarni ro'yxatini ko'rasizmi?\")\n    print('Xech kim yoq')\nelif login != a:\n    print(f\"Xush kelibsiz,{login}\")\n    print(\"Iltimoz 2 ta son kiriting⇊⇊\")\n    son1=input(\"1-son>>>\")\n    son2=input(\"2-son>>>\")",
        "detail": "5",
        "documentation": {}
    },
    {
        "label": "katta",
        "kind": 5,
        "importPath": "6",
        "description": "6",
        "peekOfCode": "katta = []\nkichik = []\ns = input(\":\")\nfor x in s:\n    if x.isupper():\n        katta.append(x)\n    else:\n        kichik.append(x)\nprint(katta)\nprint(kichik)",
        "detail": "6",
        "documentation": {}
    },
    {
        "label": "kichik",
        "kind": 5,
        "importPath": "6",
        "description": "6",
        "peekOfCode": "kichik = []\ns = input(\":\")\nfor x in s:\n    if x.isupper():\n        katta.append(x)\n    else:\n        kichik.append(x)\nprint(katta)\nprint(kichik)",
        "detail": "6",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "6",
        "description": "6",
        "peekOfCode": "s = input(\":\")\nfor x in s:\n    if x.isupper():\n        katta.append(x)\n    else:\n        kichik.append(x)\nprint(katta)\nprint(kichik)",
        "detail": "6",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "9",
        "description": "9",
        "peekOfCode": "username = input('Username kiriting >>>>')\npassword = input('Password kiriting >>>>')\nprint('Rahmat malumotlar berganizngiz uchun !')\nusername_confirm = input('Royxatdan otish uchun username kiriting >>>')\npassword_confirm = input('Royxatdan otish uchun password kiriting >>>')\nif username == username_confirm and password == password_confirm:\n    print('Siz royxatdan otdingiz')\nelif username != username_confirm or password != password_confirm:\n    print(f\"Siz yozgan username:{username_confirm} va password:{password_confirm} mana shular xato ekan\")",
        "detail": "9",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "9",
        "description": "9",
        "peekOfCode": "password = input('Password kiriting >>>>')\nprint('Rahmat malumotlar berganizngiz uchun !')\nusername_confirm = input('Royxatdan otish uchun username kiriting >>>')\npassword_confirm = input('Royxatdan otish uchun password kiriting >>>')\nif username == username_confirm and password == password_confirm:\n    print('Siz royxatdan otdingiz')\nelif username != username_confirm or password != password_confirm:\n    print(f\"Siz yozgan username:{username_confirm} va password:{password_confirm} mana shular xato ekan\")",
        "detail": "9",
        "documentation": {}
    },
    {
        "label": "username_confirm",
        "kind": 5,
        "importPath": "9",
        "description": "9",
        "peekOfCode": "username_confirm = input('Royxatdan otish uchun username kiriting >>>')\npassword_confirm = input('Royxatdan otish uchun password kiriting >>>')\nif username == username_confirm and password == password_confirm:\n    print('Siz royxatdan otdingiz')\nelif username != username_confirm or password != password_confirm:\n    print(f\"Siz yozgan username:{username_confirm} va password:{password_confirm} mana shular xato ekan\")",
        "detail": "9",
        "documentation": {}
    },
    {
        "label": "password_confirm",
        "kind": 5,
        "importPath": "9",
        "description": "9",
        "peekOfCode": "password_confirm = input('Royxatdan otish uchun password kiriting >>>')\nif username == username_confirm and password == password_confirm:\n    print('Siz royxatdan otdingiz')\nelif username != username_confirm or password != password_confirm:\n    print(f\"Siz yozgan username:{username_confirm} va password:{password_confirm} mana shular xato ekan\")",
        "detail": "9",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "c",
        "description": "c",
        "peekOfCode": "TOKEN = \"6652182496:AAGx3FTlkqe0YZrUVtaTmdCt2g0JMdmortg\"",
        "detail": "c",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "less",
        "description": "less",
        "peekOfCode": "def test():\n    down = Speedtest().download()\n    upl = Speedtest().upload()\n    down_speed = round(down / (10**6), 2)\n    upl_speed = round(upl / (10**6), 2)\n    label.config(text=\"SKOROST ZAGRUSKI:\\n\"+ str(down_speed)+ \"Mbps\")\n    label1.config(text=\"SKOROST OTDACHI:\\n\"+ str(upl_speed)+ \"Mbps\")\nroot = Tk()\nroot.title(\"SpeedTest\")\nroot.geometry(\"300x400\")",
        "detail": "less",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "less",
        "description": "less",
        "peekOfCode": "root = Tk()\nroot.title(\"SpeedTest\")\nroot.geometry(\"300x400\")\nbutton = Button(root, text=\"OHIO\", font=40, command=test)\nbutton.pack(side=BOTTOM, pady=40, padx=10)\nlabel = Label(root, text=\"SKOROST ZAGRUSKI:\\n-\", font=35)\nlabel.pack(pady=(50,0))\nlabel1 = Label(root, text=\"SKOROST OTDACHI:\\n-\", font=35)\nlabel1.pack(pady=(10,0))\nroot.mainloop()",
        "detail": "less",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "less",
        "description": "less",
        "peekOfCode": "button = Button(root, text=\"OHIO\", font=40, command=test)\nbutton.pack(side=BOTTOM, pady=40, padx=10)\nlabel = Label(root, text=\"SKOROST ZAGRUSKI:\\n-\", font=35)\nlabel.pack(pady=(50,0))\nlabel1 = Label(root, text=\"SKOROST OTDACHI:\\n-\", font=35)\nlabel1.pack(pady=(10,0))\nroot.mainloop()",
        "detail": "less",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "less",
        "description": "less",
        "peekOfCode": "label = Label(root, text=\"SKOROST ZAGRUSKI:\\n-\", font=35)\nlabel.pack(pady=(50,0))\nlabel1 = Label(root, text=\"SKOROST OTDACHI:\\n-\", font=35)\nlabel1.pack(pady=(10,0))\nroot.mainloop()",
        "detail": "less",
        "documentation": {}
    },
    {
        "label": "label1",
        "kind": 5,
        "importPath": "less",
        "description": "less",
        "peekOfCode": "label1 = Label(root, text=\"SKOROST OTDACHI:\\n-\", font=35)\nlabel1.pack(pady=(10,0))\nroot.mainloop()",
        "detail": "less",
        "documentation": {}
    },
    {
        "label": "add_digit",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def add_digit(digit):\n    value = calc.get()\n    if value[0] == '0':\n        value = value[1:]\n    calc.delete(0,tk.END)\n    calc.insert(0,value+digit)\ndef add_operation(operation):\n    value = calc.get()\n    if value[-1] in '-+/*':\n        value = value[:-1]",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "add_operation",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def add_operation(operation):\n    value = calc.get()\n    if value[-1] in '-+/*':\n        value = value[:-1]\n    calc.delete(0,tk.END)\n    calc.insert(0,value+operation)    \ndef calculate():\n    value = calc.get()\n    calc.delete(0,tk.END)\n    calc.insert(0,eval(value)) ",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def calculate():\n    value = calc.get()\n    calc.delete(0,tk.END)\n    calc.insert(0,eval(value)) \ndef m_d_b(digit):\n        return tk.Button(text=digit, bd = 5, font=('Arial', 13), command = lambda : add_digit(digit))\ndef m_o_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_operation(oper))\ndef m_c_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command=calculate)",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "m_d_b",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def m_d_b(digit):\n        return tk.Button(text=digit, bd = 5, font=('Arial', 13), command = lambda : add_digit(digit))\ndef m_o_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_operation(oper))\ndef m_c_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command=calculate)\ndef m_del_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_digit(oper))\nroot = tk.Tk()\nroot.geometry(\"240x270+100+200\")",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "m_o_b",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def m_o_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_operation(oper))\ndef m_c_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command=calculate)\ndef m_del_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_digit(oper))\nroot = tk.Tk()\nroot.geometry(\"240x270+100+200\")\nroot['bg'] = '#ff5900'\nroot.title('Calculator')",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "m_c_b",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def m_c_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command=calculate)\ndef m_del_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_digit(oper))\nroot = tk.Tk()\nroot.geometry(\"240x270+100+200\")\nroot['bg'] = '#ff5900'\nroot.title('Calculator')\ncalc = tk.Entry(root, justify=tk.RIGHT, font=('Arial', 15), width=15)\ncalc.insert(0,'0',)",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "m_del_b",
        "kind": 2,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "def m_del_b(oper):\n        return tk.Button(text=oper, bd = 5, font=('Arial', 13), fg='orange', command = lambda : add_digit(oper))\nroot = tk.Tk()\nroot.geometry(\"240x270+100+200\")\nroot['bg'] = '#ff5900'\nroot.title('Calculator')\ncalc = tk.Entry(root, justify=tk.RIGHT, font=('Arial', 15), width=15)\ncalc.insert(0,'0',)\ncalc.grid(row=0, column=0, columnspan=4, stick='we', padx=5)\nm_d_b(\"1\").grid(row=1, column=0, stick='wens', padx=5, pady=5)",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "root = tk.Tk()\nroot.geometry(\"240x270+100+200\")\nroot['bg'] = '#ff5900'\nroot.title('Calculator')\ncalc = tk.Entry(root, justify=tk.RIGHT, font=('Arial', 15), width=15)\ncalc.insert(0,'0',)\ncalc.grid(row=0, column=0, columnspan=4, stick='we', padx=5)\nm_d_b(\"1\").grid(row=1, column=0, stick='wens', padx=5, pady=5)\nm_d_b(\"2\").grid(row=1, column=1, stick='wens', padx=5, pady=5)\nm_d_b(\"3\").grid(row=1, column=2, stick='wens', padx=5, pady=5)",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "root['bg']",
        "kind": 5,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "root['bg'] = '#ff5900'\nroot.title('Calculator')\ncalc = tk.Entry(root, justify=tk.RIGHT, font=('Arial', 15), width=15)\ncalc.insert(0,'0',)\ncalc.grid(row=0, column=0, columnspan=4, stick='we', padx=5)\nm_d_b(\"1\").grid(row=1, column=0, stick='wens', padx=5, pady=5)\nm_d_b(\"2\").grid(row=1, column=1, stick='wens', padx=5, pady=5)\nm_d_b(\"3\").grid(row=1, column=2, stick='wens', padx=5, pady=5)\nm_d_b(\"4\").grid(row=2, column=0, stick='wens', padx=5, pady=5)\nm_d_b(\"5\").grid(row=2, column=1, stick='wens', padx=5, pady=5)",
        "detail": "less2",
        "documentation": {}
    },
    {
        "label": "calc",
        "kind": 5,
        "importPath": "less2",
        "description": "less2",
        "peekOfCode": "calc = tk.Entry(root, justify=tk.RIGHT, font=('Arial', 15), width=15)\ncalc.insert(0,'0',)\ncalc.grid(row=0, column=0, columnspan=4, stick='we', padx=5)\nm_d_b(\"1\").grid(row=1, column=0, stick='wens', padx=5, pady=5)\nm_d_b(\"2\").grid(row=1, column=1, stick='wens', padx=5, pady=5)\nm_d_b(\"3\").grid(row=1, column=2, stick='wens', padx=5, pady=5)\nm_d_b(\"4\").grid(row=2, column=0, stick='wens', padx=5, pady=5)\nm_d_b(\"5\").grid(row=2, column=1, stick='wens', padx=5, pady=5)\nm_d_b(\"6\").grid(row=2, column=2, stick='wens', padx=5, pady=5)\nm_d_b(\"7\").grid(row=3, column=0, stick='wens', padx=5, pady=5)",
        "detail": "less2",
        "documentation": {}
    }
]