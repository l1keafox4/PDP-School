from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram import executor
from geopy.geocoders import Nominatim
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher import FSMContext
import sqlite3
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
conn = sqlite3.connect('Tgbot1.db')
cursor = conn.cursor()
from keyboards import keyboards,find,info_ok,usernam,delivery_info,delivery,order_ok,keyboard_manager,find_manager,user,amount_edit,summa_edit,lang,current_value,button_exe
import random
from l import TOKEN
from geopy.distance import geodesic
import json
from datetime import datetime
from aiogram.types import LabeledPrice
import time

print("Online apteka bot v1.0")
PAYMENTS_TOKEN = '398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
address = ''
MANAGER_USER_ID = -4146568935

user_coordinates = {}
wait = 0
dp = Dispatcher(bot, storage=MemoryStorage())
cart = {}

# @dp.message_handler(commands=['id'])
# async def process_start_command(message: types.Message):
#     await message.answer(f"ID group {message.chat.id}")




# @dp.message_handler(commands=['adminpanel0258'])
# async def process_start_command(message: types.Message):
#     await message.answer(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–µ–Ω üü¢")
#     await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ú–∏–Ω: 3 –±—É–∫–≤)")
#     global find_manager
#     find_manager = 1
# @dp.message_handler(commands=['adminpanel0258off'])
# async def process_start_command(message: types.Message):
#     await message.answer(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω üî¥")
#     global find_manager
#     find_manager = 0


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if lang == '':
        keyboard_lang = types.InlineKeyboardMarkup(resize_keyboard=True)
        keyboard_lang.add(InlineKeyboardButton("üá∫üáø O'zbek tili", callback_data='lang_uz'))
        keyboard_lang.add(InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data='lang_ru'))
        await message.answer('Tilni tanlang | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',reply_markup=keyboard_lang)
    else:

        global id_user
        global chat_id
        chat_id = message.chat.id
        cursor.execute('SELECT * FROM users WHERE id = ?',(message.chat.id,))
        id_user = cursor.fetchall()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

        user = message.from_user
        username = user.first_name
        await message.answer(f"{('–ü—Ä–∏–≤–µ—Ç', lang)}, <b>{username}</b>!", parse_mode=ParseMode.HTML)
        await message.answer(("–≠—Ç–æ –æ–Ω–ª–∞–π–Ω –±–æ—Ç Sevinch pharm", lang))
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(("üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤", lang)))
        print(id_user)
        if id_user != []:
            keyboard.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å",lang))
            global info_ok
            global order_ok
            info_ok = 1
            order_ok = 1
            global orders
            global address
            global phone_number
            global delivery_info
            global delivery
            global usernam
            usernam = message.from_user.username
            cursor.execute("SELECT * FROM users WHERE id = ?", (message.chat.id,))
            info = cursor.fetchall()
            info = (info[0])
            phone_number = info[2]
            address = (info[1]).split("'")[1]
            orders = info[3]
            delivery = (info[1]).split(',')[0][1:]
            delivery_info = f"üöö {('–î–æ—Å—Ç–∞–≤–∫–∞', lang)}: {info[1].split(',')[0][1:]} —Å—É–º {lang} {info[1].split(',')[1][1:]}km ‚âà {int(info[1].split(',')[2])+10} –º–∏–Ω—É—Ç"
        else:

            keyboard.add(KeyboardButton(("üìû –î–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),lang))
        await message.answer(f"{('‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', lang)}", reply_markup=keyboard)

@dp.callback_query_handler(text_contains = 'lang_')
async def setLanguage(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    global lang
    if callback.data[5:] == 'ru':
        lang = 'ru'
        await bot.send_message(callback.from_user.id, '–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫\n–ù–∞–ø–∏—à–∏—Ç–µ: /start')
    if callback.data[5:] == 'uz':
        lang = 'uz'
        await bot.send_message(callback.from_user.id, 'Til tanlandi\nYozing: /start')      


@dp.message_handler(lambda message: message.text in(('üìû –î–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', lang),('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', lang)))
async def get_chat_id(message: types.Message):
     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
     keyboard.add(KeyboardButton(("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", lang),request_location=True))
     await message.answer(("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", lang))
     await message.answer(("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", lang), reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.LOCATION)
async def handle_location(message: types.Message):
     global latitude
     global longitude
     latitude = message.location.latitude
     longitude = message.location.longitude
 
     def get_address_from_coordinates(latitude, longitude):
         geolocator = Nominatim(user_agent="your_app_name")
         location = geolocator.reverse((latitude, longitude), language="ru")
         return location.address
     global address
     address = get_address_from_coordinates(latitude, longitude)
     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
     keyboard.add(KeyboardButton(("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", lang), request_contact=True))
     await message.answer(("–í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.\n–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", lang),reply_markup=keyboard)
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    markup=types.ReplyKeyboardRemove()
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–û–∂–∏–¥–∞–π—Ç–µ –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–ó–∞–¥–µ—Ä–∂–∫–∞ ‚âà30-40—Å–µ–∫—É–Ω–¥)")
    graph_area = ("–¢–∞—à–∫–µ–Ω—Ç, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω")
    global usernam
    usernam = message.from_user.username
    global delivery_info,delivery
    # # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–≤—É—Ö —Ç–æ—á–µ–∫
    # # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ 
    print(distance_in_meters)
    distance_in_meters = int(distance_in_meters)
    delivery = int(distance_in_meters/500)
    kilo = round(distance_in_meters/1000, 2)
    delivery = delivery*5000
    print(distance_in_meters)
    addresss = [] 
    addresss.append(delivery)
    addresss.append(kilo)
    addresss.append(int())
    addresss.append(address)
    cord = []
    cord.append(latitude)
    cord.append(longitude)
    cord_txt = json.dumps(cord)
    cursor.execute('SELECT * FROM users WHERE id = ?',(message.chat.id,))
    id_user = cursor.fetchall()
    if id_user == []:
        cursor.execute('INSERT INTO users VALUES (?,?,?,?,?,?)',(message.chat.id,str(addresss),phone_number,'', cord_txt,lang))
        conn.commit()
    else:
       id_user = list(id_user[0])
       cursor.execute(f'UPDATE users SET adress = ?, telephone = ?, cord = ? WHERE id = {message.chat.id}',(addresss,phone_number,cord_txt))
       conn.commit()
    global info_ok
    info_ok = 1
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(f'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'))
    keyboard.add(KeyboardButton(f'üõí –ö–æ—Ä–∑–∏–Ω–∞'))
    keyboard.add(KeyboardButton(f'üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤'))
    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",reply_markup=keyboard)
@dp.message_handler(lambda message: message.text == 'üë§ Profil')
async def get_chat_id(message: types.Message):
    global orders
    global address
    global phone_number

    cursor.execute("SELECT * FROM users WHERE id = ?", (message.chat.id,))
    info = cursor.fetchall()
    info = (info[0])
    phone_number = info[2]
    address = (info[1]).split("'")[1]
    orders = info[3]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üõç –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
    keyboard.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer(f"""
‚ÑπÔ∏è –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üÜî Username: @{message.from_user.username}
üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: {phone_number}
üìç –ê–¥—Ä–µ—Å: {(info[1]).split("'")[1]}\n
üöö –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –æ–±–æ–π–¥—ë—Ç—Å—è –≤ {(info[1]).split(',')[0][1:]} {("—Å—É–º", lang)} ({(info[1]).split(',')[1][1:]}km ‚âà {int((info[1]).split(',')[2])+10} –º–∏–Ω—É—Ç)

‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç —á–∞—Ç –≤–∞—à—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—ë—Ä—Ç—ã ‚ö†Ô∏è
""",reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üõç Mening buyurtmalarim')
async def get_chat_id(message: types.Message):
   if order_ok == 1: 
    if orders == '':
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
    else:
        cursor.execute('SELECT orders FROM users WHERE id = ?', (chat_id,))
        order_info = cursor.fetchall()[0]
        json_data = order_info
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
        list_data = list(json.loads(json_data[0]))
        for i in list_data:
            cursor.execute('SELECT * FROM "order" WHERE id_order = ?', (i,))
            try:
                info = list(cursor.fetchall()[0])
            except:
                continue
            json_data = info[4]
            json_data1 = info[5]
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
            recipient_info = list(json.loads(json_data))
            address_info = list(json.loads(json_data1))
    await message.answer(f"""–ó–∞–∫–∞–∑:‚Ññ{info[0]}
--------------------------------
üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞:
{info[1]}
--------------------------------
üí≤–û–ø–ª–∞—Ç–∞: {info[2]}{("—Å—É–º", lang)}
üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–µ
--------------------------------
üìç –ê–¥—Ä–µ—Å: {info[3]}
{address_info[0]}
–°—Ç–∞—Ç—É—Å: {address_info[1]}
--------------------------------
 –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
üÜî Username: @{recipient_info[0]}
üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: <code>+{recipient_info[1]}</code>
--------------------------------
üóì –î–∞—Ç–∞ {info[6]}
    """, parse_mode=ParseMode.HTML)

@dp.message_handler(lambda message: message.text in ('‚¨ÖÔ∏è Ortga','‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
async def get_chat_id(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(("üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤", lang)))
    if id_user != []:
        keyboard.add(KeyboardButton(("üë§ –ü—Ä–æ—Ñ–∏–ª—å", lang)))
    else:
        keyboard.add(KeyboardButton(("üìû –î–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),lang))
    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
@dp.message_handler(lambda message: message.text in ('üíµ –ù–∞–ª–∏—á–Ω—ã–µ'))
async def get_chat_id(message: types.Message):
   if info_ok == 1:
    keyboardsss = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton("–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='accept')]
                ])
    global nom
    cursor.execute('SELECT id_order FROM "order"')
    try:
        number = list(cursor.fetchall()[0])
    except:
        number = cursor.fetchall()
    a = 0
    b = []
    while a == 0:
        nom = random.randint(1000,9999)
        for i in number:
            if nom != i:
                b.append('TRUE')
            else:
                b.append('FALSE')
        if b.count('FALSE') == 0:
            a = 1

    await message.answer(f"""–ó–∞–∫–∞–∑:‚Ññ{nom}
--------------------------------
üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞:
{cart_info}
--------------------------------
üí≤ –ö –æ–ø–ª–∞—Ç–µ: {formatted_total} {("—Å—É–º", lang)}
üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–µ
--------------------------------
üìç –ê–¥—Ä–µ—Å: {address}
--------------------------------
{delivery_info}
--------------------------------
‚ÑπÔ∏è –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–µ–¥–µ—Ç –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –∫—É—Ä—å–µ—Ä ‚ÑπÔ∏è
""", reply_markup=keyboardsss)
    global sposob_oplati
    sposob_oplati = 'üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–µ'
   else:
       await message.answer('–í—ã –Ω–µ –¥–∞–ª–∏ –±–æ—Ç—É –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä')
       keyboard_loc = types.ReplyKeyboardMarkup(resize_keyboard=True)
       keyboard_loc.add(KeyboardButton(("üìû –î–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),lang))
       await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_loc)
@dp.message_handler(lambda message: message.text == 'üí≥ Click (–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
async def get_chat_id(message: types.Message):
   if info_ok == 1:
    keyboardsss = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(("–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", lang), callback_data='accept')]
                ])
    global nom
    global formatted_total
    cursor.execute('SELECT id_order FROM "order"')
    try:
        number = list(cursor.fetchall()[0])
    except:
        number = cursor.fetchall()
    a = 0
    b = []
    while a == 0:
        nom = random.randint(1000,9999)
        for i in number:
            if nom != i:
                b.append('TRUE')
            else:
                b.append('FALSE')
        if b.count('FALSE') == 0:
            a = 1
    await message.answer((f"""{("–ó–∞–∫–∞–∑",lang)}:‚Ññ{nom}
--------------------------------
üíä {("–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", lang)}:
{cart_info}
--------------------------------
üí≤ {("–ö –æ–ø–ª–∞—Ç–µ", lang)}: {formatted_total} {("—Å—É–º", lang)}
üí≥ {("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",lang)}: Click
--------------------------------
üìç {("–ê–¥—Ä–µ—Å",lang)}: {address}
--------------------------------
{delivery_info}
--------------------------------
{("‚ÑπÔ∏è –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–µ–¥–µ—Ç –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –∫—É—Ä—å–µ—Ä ‚ÑπÔ∏è",lang)}
""", lang), reply_markup=keyboardsss)
    global sposob_oplati
    sposob_oplati = 'üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: Click'
    prices = [LabeledPrice(label='Product 1', amount=int(formatted_total.replace('.',''))*100)]
    await bot.send_invoice(message.chat.id, title='–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Click', description= '–û–ø–ª–∞—Ç–∏—Ç–µ –∏ –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ', provider_token='398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065', currency='UZS', prices=prices, payload='–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', photo_url='https://avatars.dzeninfra.ru/get-zen_doc/271828/pub_6597bdf5df834a4869446684_6597be07df834a4869446c9a/scale_1200')

   else:
       await message.answer(('–í—ã –Ω–µ –¥–∞–ª–∏ –±–æ—Ç—É –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä', lang))
       keyboard_loc = types.ReplyKeyboardMarkup(resize_keyboard=True)
       keyboard_loc.add(KeyboardButton(("üìû –î–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),lang))
       await message.answer(("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", lang), reply_markup=keyboard_loc)

@dp.message_handler(lambda message: message.text in (('üõí –ö–æ—Ä–∑–∏–Ω–∞', lang)))
async def get_chat_id(message: types.Message):
   try: 
    reply_markup=types.ReplyKeyboardRemove()
    cart_sum = {}
    global formatted_total
    global cart_info
    cart_info = ""
    keyboardss = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data='buy')]])
    # total = 0
    print(cart)
    for key, value in cart.items():
        print(f"{key} = {value}")
        cursor.execute("SELECT narxi,soni FROM dorilar WHERE nomi = ?", (key,))
        summa = cursor.fetchall()
        summa = list(summa[0])
        suma = int((summa[0][:-3]).replace(" ", ""))*int(value)
        amount = (summa[1]).replace(",", "")
        cart_sum[key] = suma 
        total = sum(int(value+int(delivery)) for value in cart_sum.values())
        print(total)
        formatted_sum = "{:,}".format(cart_sum[key]).replace(",", ".")
        cart_info += f"üíä{key}|{value} {('—à—Ç.', lang)}|üíµ{('–°—Ç–æ–∏–º–æ—Å—Ç—å', lang)}:{formatted_sum} {('—Å—É–º', lang)}\n"
    formatted_total = "{:,}".format(total).replace(",", ".")
    await message.answer(f"""{("–í–æ—Ç –≤–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", lang)}:
{cart_info}------------------------------------------------
{delivery_info}
{("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", lang)}: {formatted_total} {("—Å—É–º", lang)}
""", reply_markup=keyboardss)
   except:
    await message.answer(("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", lang))

@dp.message_handler(lambda message: message.text in (('üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤', lang)))
async def get_chat_id(message: types.Message):
    global find
    reply_markup=types.ReplyKeyboardRemove()
    await message.answer(("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–ú–∏–Ω: 3 –±—É–∫–≤)", lang))
    find =+ 1
@dp.message_handler()
async def process_user_medicine(message: types.Message):
 global name1
 global find_manager
 global summa_edit
 global amount_edit
 global last_message
 global infor
 global amount
 edit = 0
 if summa_edit == 1:
       a = message.text + ',00'
       cursor.execute("UPDATE dorilar SET narxi = ? WHERE nomi = ?", (a, name1))
       conn.commit()
       await message.answer(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ —Å –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ /adminpanel0258off")
       await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ú–∏–Ω: 3 –±—É–∫–≤)")
       summa_edit = 0
       edit = 1
       find_manager = 1
 if amount_edit == 1:
       cursor.execute("UPDATE dorilar SET soni = ? WHERE nomi = ?", (message.text ,name1))
       conn.commit()
       await message.answer(f"–ù–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ —Å –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ /adminpanel0258off")
       await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ú–∏–Ω: 3 –±—É–∫–≤)")
       edit = 1
       find_manager = 1
       amount_edit = 0
 if find_manager == 1:
   if len(message.text) >= 3:
     if message.text[:1] == 'üîπ':
         name1 = message.text.split('|')[0]
         name1 = name1[1:].strip()
         cursor.execute("SELECT price FROM product_prices WHERE product_name = ?", (name1,))
         infor = cursor.fetchall()
         infor = list(infor[0])
         last_message =  (await message.answer(f"""–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {name1}
 
 –°—Ç–æ–∏–º–æ—Å—Ç—å: {infor[0]} {("—Å—É–º", lang)}
 """, reply_markup=keyboard_manager, parse_mode=ParseMode.HTML))
     else:
         user_medicine = message.text
         msg = message.text
         javob = msg
         search_query = (javob(msg).upper())
         cursor.execute("SELECT * FROM product_prices WHERE product_name LIKE ?", (search_query + '%',))
         results = cursor.fetchall()
         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
         for row in results:
             keyboard.add(KeyboardButton(f'üîπ {row[0]}|üíµ {row[1][:-3]} {("—Å—É–º", lang)}'))
         if edit == 0:
          if results == []:
             await message.answer("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¥")
          else:
             await message.answer("–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", reply_markup=keyboard)
         edit = 0
   else:
    try:
     if edit == 0:
        await message.answer(f"–ú–∏–Ω–∏–º—É–º 3 –±—É–∫–≤")
    except:
        None
 if len(message.text) >= 3:
     if message.text[:1] == 'üîπ':
         name1 = message.text.split('|')[0]
         name1 = name1[1:].strip()
         cursor.execute("SELECT price FROM product_prices WHERE product_name = ?", (name1,))
         info = cursor.fetchall()
         info = list(info[0])
         global current_value
         current_value = 0
         last_message =  (await message.answer(f"""–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {name1}
 
 –°—Ç–æ–∏–º–æ—Å—Ç—å: {info[0]}
 ----------------------------------------------------------------------------------------------------
 –ï—Å—Ç—å –≤ –∞–ø—Ç–µ–∫–∞—Ö: 
 1) <code>–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, –º–∞—Å—Å–∏–≤ –ì–æ—Å–ø–∏—Ç–∞–ª—å–Ω—ã–π, 65</code>
 2) <code>41.250756,69.157144, –ó–∞–Ω–≥–∏–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å</code>
 """, reply_markup=keyboards, parse_mode=ParseMode.HTML))
     else:
         user_medicine = message.text
         msg = message.text
         javob = msg
         search_query = (javob(msg).upper())
         cursor.execute("SELECT * FROM product_prices WHERE product_name LIKE ?", (search_query + '%',))
         results = cursor.fetchall()
         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
         for row in results:

            keyboard.add(KeyboardButton(f'üîπ {row[0]}|üíµ {row[1][:-3]} {("—Å—É–º", lang)}'))
         if results == []:
            await message.answer("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¥")
         else:
            keyboard.add(KeyboardButton(f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
            await message.answer("–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", reply_markup=keyboard)
 else:
       await message.answer(f"–ú–∏–Ω–∏–º—É–º 3 –±—É–∫–≤")






from keyboards import button_exe
from keyboards import current_value
async def button_ex() -> InlineKeyboardMarkup:
    global current_value
    if current_value > 5:
        keyboards = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("+10", callback_data='plus10'),InlineKeyboardButton("+", callback_data='plus'),InlineKeyboardButton(f"{current_value}", callback_data="amount"),InlineKeyboardButton("-", callback_data='minus'),InlineKeyboardButton("-10", callback_data='minus10')],
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='add_cart')]
        ])
    else:
        keyboards = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("+", callback_data='plus'),InlineKeyboardButton(f"{current_value}", callback_data="amount"),InlineKeyboardButton("-", callback_data='minus')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='add_cart')]
    ])
    return keyboards



@dp.callback_query_handler(text="plus")
async def update_button(call: types.CallbackQuery):
    global current_value
    try:
        if int(current_value+1) <= int(amount):
            current_value += 1
        await call.message.edit_reply_markup(reply_markup=await button_ex())
    except:
        None
@dp.callback_query_handler(text="plus10")
async def update_button(call: types.CallbackQuery):
    global current_value,amount
    try:
        if int(current_value+10) <= int(amount):
            current_value += 10
        await call.message.edit_reply_markup(reply_markup=await button_ex())
    except:
        None
@dp.callback_query_handler(text="minus")
async def update_button(call: types.CallbackQuery):
    global current_value
    try:
        if current_value != 0:
            current_value -= 1
        await call.message.edit_reply_markup(reply_markup=await button_ex())
    except:
        None
@dp.callback_query_handler(text="minus10")
async def update_button(call: types.CallbackQuery):
    global current_value
    try:
        if current_value > 10:
            current_value -= 10
        await call.message.edit_reply_markup(reply_markup=await button_ex())
    except:
        None
@dp.callback_query_handler(text="edit_summa")
async def update_button(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É')
    global summa_edit
    summa_edit = 1
    find_manager = 0
@dp.callback_query_handler(text="edit_amount")
async def update_button(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ª–∏—á–∏–µ')
    global amount_edit
    amount_edit = 1
    find_manager = 0
@dp.callback_query_handler(text="add_cart")
async def alert(callback: types.CallbackQuery):
   global cart
   global current_value
   global find
   try:
    if current_value != 0: 
     cursor.execute("SELECT orders FROM users WHERE id = ?", (chat_id,))
     info = list(cursor.fetchall()[0])
     await bot.answer_callback_query(callback.id, text=f'üíä{name1}\n{current_value} —à—Ç.\nüõí –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert=True)
     cart[name1] = current_value
     find = 0
     print(cart)
     current_value =1
     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
     keyboard.add(KeyboardButton(f'üõí –ö–æ—Ä–∑–∏–Ω–∞'))
     keyboard.add(KeyboardButton(f'üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤'))
     keyboard.add(KeyboardButton(f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
     await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
    else:
     await bot.send_message(chat_id=callback.message.chat.id, text="–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
   except:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    keyboard.add(KeyboardButton(f'üìû –î–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'))
    await bot.send_message(chat_id=callback.message.chat.id, text=" ‚ùå –£ –≤–∞—Å —é–Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã\n–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=keyboard)
    cart = {}
@dp.callback_query_handler(text="buy")
async def update_button(callback: types.CallbackQuery):
    global current_value
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(f'üí≥ Click (–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'))
    keyboard.add(KeyboardButton(f'üíµ –ù–∞–ª–∏—á–Ω—ã–µ'))
    await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=keyboard)
@dp.callback_query_handler(text="delivered")
async def update_button(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è—è —Ä–∞–∑–º–µ—Ç–∫—É
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ callback.data
    message_text = callback.message.text
    order_number = int(message_text.split('|')[1][1:])
    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    cursor.execute('SELECT delivered FROM "order" WHERE id_order =?', (order_number,))
    info = list(cursor.fetchall()[0])
    list_data = list(json.loads(info[0]))
    list_data.pop()
    list_data.append("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
    json_data1 = json.dumps(list_data)
    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "delivered" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('UPDATE "order" SET delivered = ? WHERE id_order = ?', (json_data1, order_number))
    conn.commit()

    # –í—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f'–ó–∞–∫–∞–∑ {order_number} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω')

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "delivered"
    await bot.send_message(chat_id=callback.message.chat.id,text=f"–ó–∞–∫–∞–∑ {order_number} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")




@dp.callback_query_handler(text="accept")
async def update_button(callback: types.CallbackQuery):
    message = callback.message
    now = datetime.now()
    formatted_date_time = now.strftime("%d:%m:%Y %H:%M")
    keyboards = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data='delivered')]])
    cursor.execute("SELECT cord FROM users WHERE id = ?", (chat_id,))
    cord_txt = cursor.fetchall()
    cord_txt = list(cord_txt[0])
    cord = list(json.loads(cord_txt[0]))
    location = types.Location(latitude=cord[0], longitude=cord[1])
    await bot.send_message(MANAGER_USER_ID,f"""–ó–∞–∫–∞–∑:|‚Ññ
--------------------------------
üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞:
{cart_info}
--------------------------------
üí≤–û–ø–ª–∞—Ç–∞: {formatted_total}{("—Å—É–º", lang)}
{sposob_oplati}
--------------------------------
üìç –ê–¥—Ä–µ—Å: {address}
{delivery_info}
--------------------------------
‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
üÜî Username: @{usernam}
üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: <code>+{phone_number}</code>
--------------------------------
üóì –î–∞—Ç–∞ {formatted_date_time}
            ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
    """, parse_mode=ParseMode.HTML, reply_markup=keyboards)
    await bot.send_location(
        MANAGER_USER_ID,
        location.latitude,
        location.longitude)
    await bot.send_message(MANAGER_USER_ID, text=f"‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è")
    list_data = []
    list_data.append(usernam)
    list_data.append(phone_number)
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ JSON
    json_data1 = json.dumps(list_data)
    list_data = []
    list_data.append(delivery_info)
    list_data.append('–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è')
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ JSON
    json_data2 = json.dumps(list_data)
    cursor.execute('INSERT INTO "order" VALUES (?,?,?,?,?,?,?)', (nom, cart_info, formatted_total, address,json_data1, json_data2, formatted_date_time))
    cursor.execute("SELECT orders FROM users WHERE id = ?", (chat_id,))
    info = list(cursor.fetchall()[0])
    # –°—Ç—Ä–æ–∫–∞ JSON
    json_data = info[0]
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
    try:
        list_data = list(json.loads(json_data))
    except:
        list_data = []
    # –í—ã–≤–æ–¥: [1, 2, 3, 4, 5]
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    list_data.append(nom)
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ JSON
    json_data = json.dumps(list_data)
    # –í—ã–≤–æ–¥: "[1, 2, 3, 4, 5]"

    cursor.execute("UPDATE users SET orders = ? WHERE id = ?", (json_data, chat_id))
    await bot.send_message(chat_id=callback.message.chat.id, text="Sizning buyurtmangiz qabul qilindi, manager javobini kutib qoling")
    conn.commit()
    global cart
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = cart.items()
    for i in items:
        cursor.execute("SELECT soni FROM dorilar WHERE nomi = ?", (i[0],))
        soni = cursor.fetchall()
        soni = list(soni[0])
        soni = int(soni[0].replace(",", "")) - int(i[1])
        cursor.execute("UPDATE dorilar SET soni =? WHERE nomi =?", (soni, i[0]))
        conn.commit()


    cart = {}
    keyboard.add(KeyboardButton(f'üë§ Profil'))
    keyboard.add(KeyboardButton(f'üîç Dori-darmon qidirish'))

    await bot.send_message(chat_id=callback.message.chat.id, text="Amalni tanlang", reply_markup=keyboard)





@dp.message_handler(commands=['my_chat_id'])
async def get_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.answer(f"Chat ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")



if __name__ == '__main__':
    while True:
        try:
            executor.start_polling(dp, skip_updates=True)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞: {e}.\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.')
            time.sleep(10)